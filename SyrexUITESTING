-- Syrex UI Library - With GUI Toggle Keybind Setting

if game.CoreGui:FindFirstChild("SyrexUILib") then
    game.CoreGui.SyrexUILib:Destroy()
end

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Theme = {
    Background = Color3.fromRGB(9,9,13),
    Section = Color3.fromRGB(0,20,40),
    Element = Color3.fromRGB(61,133,224),
    Text = Color3.fromRGB(255,255,255),
}

local Settings = {CloseBind = Enum.KeyCode.RightControl}

-- Create draggable function
local function MakeDraggable(topbar, frame)
    local Dragging, DragInput, DragStart, StartPos
    local function Update(input)
        local Delta = input.Position - DragStart
        frame.Position = UDim2.new(
            StartPos.X.Scale, StartPos.X.Offset + Delta.X,
            StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y
        )
    end
    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
end

-- ScreenGui
local Gui = Instance.new("ScreenGui")
Gui.Name = "SyrexUILib"
Gui.Parent = CoreGui
Gui.ResetOnSpawn = false

-- Main GUI
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0,520,0,340)
MainFrame.Position = UDim2.new(0.5,-260,0.5,-170)
MainFrame.BackgroundColor3 = Theme.Background
MainFrame.Active = true
MainFrame.Parent = Gui
Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0,6)

-- Floating Tab Bar
local TabFrame = Instance.new("Frame")
TabFrame.Size = UDim2.new(0,100,0,340)
TabFrame.Position = UDim2.new(0.5,-370,0.5,-170)
TabFrame.BackgroundColor3 = Theme.Background
TabFrame.Parent = Gui
Instance.new("UICorner", TabFrame).CornerRadius = UDim.new(0,6)

-- Floating tab offset
local independent = false
local defaultOffset = Vector2.new(-110,0)
local function getOffset()
    return Vector2.new(TabFrame.AbsolutePosition.X-MainFrame.AbsolutePosition.X, TabFrame.AbsolutePosition.Y-MainFrame.AbsolutePosition.Y)
end
local tabOffset = getOffset()

RunService.RenderStepped:Connect(function()
    if not independent then
        local newPos = Vector2.new(MainFrame.AbsolutePosition.X+tabOffset.X, MainFrame.AbsolutePosition.Y+tabOffset.Y)
        TabFrame.Position = UDim2.fromOffset(newPos.X,newPos.Y)
    end
end)
TabFrame:GetPropertyChangedSignal("Position"):Connect(function()
    if independent then tabOffset = getOffset() end
end)
TabFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        independent = true
    end
end)
local lastClick = 0
TabFrame.InputBegan:Connect(function(input)
    if input.UserInputType==Enum.UserInputType.MouseButton1 then
        local now = tick()
        if now-lastClick<0.3 then
            independent=false
            tabOffset = defaultOffset
        end
        lastClick=now
    end
end)

-- TopBar
local TopBar = Instance.new("Frame", MainFrame)
TopBar.Size = UDim2.new(1,0,0,34)
TopBar.BackgroundTransparency = 1

local Title = Instance.new("TextLabel", TopBar)
Title.Size = UDim2.new(1,-80,1,0)
Title.Position = UDim2.new(0,12,0,0)
Title.BackgroundTransparency = 1
Title.Font = Enum.Font.FredokaOne
Title.Text = "Syrex UI Library"
Title.TextColor3 = Theme.Text
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Left

local CloseBtn = Instance.new("TextButton", TopBar)
CloseBtn.Size = UDim2.new(0,60,0,24)
CloseBtn.Position = UDim2.new(1,-70,0,5)
CloseBtn.BackgroundColor3 = Theme.Section
CloseBtn.Text = "Close"
CloseBtn.Font = Enum.Font.SourceSansBold
CloseBtn.TextColor3 = Theme.Text
CloseBtn.TextSize = 14
Instance.new("UICorner", CloseBtn).CornerRadius = UDim.new(0,6)

local MinBtn = Instance.new("TextButton", TopBar)
MinBtn.Size = UDim2.new(0,40,0,24)
MinBtn.Position = UDim2.new(1,-120,0,5)
MinBtn.BackgroundColor3 = Theme.Section
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.SourceSansBold
MinBtn.TextColor3 = Theme.Text
MinBtn.TextSize = 18
Instance.new("UICorner", MinBtn).CornerRadius = UDim.new(0,6)

-- Library Table
local SyrexUI = {Tabs = {}, Gui = Gui}

-- CreateWindow
function SyrexUI:CreateWindow(name, toggleKey)
    Title.Text = name or Title.Text
    if toggleKey then
        Settings.CloseBind = toggleKey
    end
    return self
end

-- CreateTab
function SyrexUI:CreateTab(name)
    local content = Instance.new("ScrollingFrame", MainFrame)
    content.Size = UDim2.new(1,-24,1,-56)
    content.Position = UDim2.new(0,12,0,44)
    content.BackgroundTransparency = 1
    content.Visible = false
    content.ScrollingEnabled = true
    content.ScrollBarThickness = 6
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.CanvasSize = UDim2.new(0,0,0,0)

    local btn = Instance.new("TextButton", TabFrame)
    btn.Size = UDim2.new(1,-10,0,40)
    btn.Position = UDim2.new(0,5,0,20+(#self.Tabs*50))
    btn.BackgroundColor3 = Theme.Section
    btn.Text = name
    btn.Font = Enum.Font.SourceSansBold
    btn.TextColor3 = Theme.Text
    btn.TextSize = 16
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)

    btn.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            t.content.Visible = false
            t.button.BackgroundColor3 = Theme.Section
        end
        content.Visible = true
        btn.BackgroundColor3 = Theme.Element
    end)

    if #self.Tabs==0 then
        content.Visible=true
        btn.BackgroundColor3 = Theme.Element
    end

    local elementCount = 0
    
    local function getYOffset()
        return elementCount * 42
    end

    local tabData = {
        button = btn, 
        content = content,
        
        AddButton = function(self, text, callback)
            local yOffset = getYOffset()
            local btn = Instance.new("TextButton", self.content)
            btn.Size = UDim2.new(0.9,0,0,36)
            btn.Position = UDim2.new(0.05,0,0,yOffset)
            btn.BackgroundColor3 = Theme.Section
            btn.Font = Enum.Font.SourceSansBold
            btn.TextColor3 = Theme.Text
            btn.TextSize = 18
            btn.Text = text
            btn.TextXAlignment = Enum.TextXAlignment.Center
            Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
            btn.MouseButton1Click:Connect(callback)
            elementCount = elementCount + 1
            return btn
        end,
        
        AddToggle = function(self, text, default, callback)
            local yOffset = getYOffset()
            local toggle = Instance.new("TextButton", self.content)
            toggle.Size = UDim2.new(0.9,0,0,36)
            toggle.Position = UDim2.new(0.05,0,0,yOffset)
            toggle.BackgroundColor3 = Theme.Section
            toggle.Font = Enum.Font.SourceSansBold
            toggle.TextColor3 = Theme.Text
            toggle.TextSize = 18
            toggle.Text = text..": "..(default and "ON" or "OFF")
            toggle.TextXAlignment = Enum.TextXAlignment.Center
            Instance.new("UICorner", toggle).CornerRadius = UDim.new(0,6)

            local state = default
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = text..": "..(state and "ON" or "OFF")
                toggle.BackgroundColor3 = state and Theme.Element or Theme.Section
                if callback then callback(state) end
            end)
            elementCount = elementCount + 1
            return toggle
        end,
        
        AddSlider = function(self, text, min, max, default, callback)
            local yOffset = getYOffset()
            local sliderFrame = Instance.new("Frame", self.content)
            sliderFrame.Size = UDim2.new(0.9,0,0,32)
            sliderFrame.Position = UDim2.new(0.05,0,0,yOffset)
            sliderFrame.BackgroundTransparency = 1

            local bar = Instance.new("Frame", sliderFrame)
            bar.Size = UDim2.new(1,0,0,8)
            bar.Position = UDim2.new(0,0,0.5,-4)
            bar.BackgroundColor3 = Theme.Section
            Instance.new("UICorner", bar).CornerRadius = UDim.new(1,0)

            local fill = Instance.new("Frame", bar)
            fill.Size = UDim2.new((default-min)/(max-min),0,1,0)
            fill.BackgroundColor3 = Theme.Element
            Instance.new("UICorner", fill).CornerRadius = UDim.new(1,0)

            local valueLabel = Instance.new("TextLabel", sliderFrame)
            valueLabel.Position = UDim2.new(1,-50,0,-4)
            valueLabel.Size = UDim2.new(0,50,1,0)
            valueLabel.BackgroundTransparency = 1
            valueLabel.TextColor3 = Theme.Text
            valueLabel.Font = Enum.Font.SourceSansBold
            valueLabel.TextSize = 14
            valueLabel.Text = tostring(default)

            local dragging = false
            bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                end
            end)
            bar.InputEnded:Connect(function() dragging = false end)
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local relX = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
                    fill.Size = UDim2.new(relX,0,1,0)
                    local val = math.floor(min + relX*(max-min))
                    valueLabel.Text = tostring(val)
                    if callback then callback(val) end
                end
            end)
            elementCount = elementCount + 1
            return sliderFrame
        end,
        
        AddKeybind = function(self, text, defaultKey, callback)
            local yOffset = getYOffset()
            
            local keybindFrame = Instance.new("Frame", self.content)
            keybindFrame.Size = UDim2.new(0.9, 0, 0, 24)
            keybindFrame.Position = UDim2.new(0.05, 0, 0, yOffset)
            keybindFrame.BackgroundTransparency = 1

            local bindLabel = Instance.new("TextLabel", keybindFrame)
            bindLabel.Position = UDim2.new(0, 0, 0, 0)
            bindLabel.Size = UDim2.new(0.6, 0, 1, 0)
            bindLabel.BackgroundTransparency = 1
            bindLabel.Font = Enum.Font.SourceSans
            bindLabel.Text = text .. ": " .. tostring(defaultKey)
            bindLabel.TextColor3 = Theme.Text
            bindLabel.TextSize = 14
            bindLabel.TextXAlignment = Enum.TextXAlignment.Left

            local setBindBtn = Instance.new("TextButton", keybindFrame)
            setBindBtn.Position = UDim2.new(0.62, 0, 0, 0)
            setBindBtn.Size = UDim2.new(0.36, 0, 1, 0)
            setBindBtn.BackgroundColor3 = Theme.Element
            setBindBtn.Font = Enum.Font.SourceSansBold
            setBindBtn.Text = "Set Bind"
            setBindBtn.TextColor3 = Theme.Text
            Instance.new("UICorner", setBindBtn).CornerRadius = UDim.new(0, 6)

            local currentKey = defaultKey
            
            setBindBtn.MouseButton1Click:Connect(function()
                setBindBtn.Text = "Press a key..."
                local conn
                conn = UserInputService.InputBegan:Connect(function(input, gp)
                    if gp then return end
                    if input.KeyCode ~= Enum.KeyCode.Unknown then
                        currentKey = input.KeyCode
                        bindLabel.Text = text .. ": " .. tostring(currentKey)
                        setBindBtn.Text = "Set Bind"
                        if callback then callback(currentKey) end
                        conn:Disconnect()
                    end
                end)
                delay(8, function()
                    if conn and conn.Connected then
                        conn:Disconnect()
                        setBindBtn.Text = "Set Bind"
                    end
                end)
            end)
            elementCount = elementCount + 1
            return {
                Frame = keybindFrame,
                Label = bindLabel,
                Button = setBindBtn,
                GetKey = function() return currentKey end,
                SetKey = function(newKey)
                    currentKey = newKey
                    bindLabel.Text = text .. ": " .. tostring(currentKey)
                    if callback then callback(currentKey) end
                end
            }
        end,
        
        -- NEW: AddToggleKeybind method specifically for GUI toggle
        AddToggleKeybind = function(self, text, defaultKey)
            local yOffset = getYOffset()
            
            local keybindFrame = Instance.new("Frame", self.content)
            keybindFrame.Size = UDim2.new(0.9, 0, 0, 24)
            keybindFrame.Position = UDim2.new(0.05, 0, 0, yOffset)
            keybindFrame.BackgroundTransparency = 1

            local bindLabel = Instance.new("TextLabel", keybindFrame)
            bindLabel.Position = UDim2.new(0, 0, 0, 0)
            bindLabel.Size = UDim2.new(0.6, 0, 1, 0)
            bindLabel.BackgroundTransparency = 1
            bindLabel.Font = Enum.Font.SourceSans
            bindLabel.Text = text .. ": " .. tostring(Settings.CloseBind)
            bindLabel.TextColor3 = Theme.Text
            bindLabel.TextSize = 14
            bindLabel.TextXAlignment = Enum.TextXAlignment.Left

            local setBindBtn = Instance.new("TextButton", keybindFrame)
            setBindBtn.Position = UDim2.new(0.62, 0, 0, 0)
            setBindBtn.Size = UDim2.new(0.36, 0, 1, 0)
            setBindBtn.BackgroundColor3 = Theme.Element
            setBindBtn.Font = Enum.Font.SourceSansBold
            setBindBtn.Text = "Set Bind"
            setBindBtn.TextColor3 = Theme.Text
            Instance.new("UICorner", setBindBtn).CornerRadius = UDim.new(0, 6)
            
            setBindBtn.MouseButton1Click:Connect(function()
                setBindBtn.Text = "Press a key..."
                local conn
                conn = UserInputService.InputBegan:Connect(function(input, gp)
                    if gp then return end
                    if input.KeyCode ~= Enum.KeyCode.Unknown then
                        Settings.CloseBind = input.KeyCode
                        bindLabel.Text = text .. ": " .. tostring(Settings.CloseBind)
                        setBindBtn.Text = "Set Bind"
                        conn:Disconnect()
                    end
                end)
                delay(8, function()
                    if conn and conn.Connected then
                        conn:Disconnect()
                        setBindBtn.Text = "Set Bind"
                    end
                end)
            end)
            elementCount = elementCount + 1
        end,
        
        AddDropdown = function(self, text, options, default, callback)
            local yOffset = getYOffset()
            
            local dropdownFrame = Instance.new("Frame", self.content)
            dropdownFrame.Size = UDim2.new(0.9, 0, 0, 36)
            dropdownFrame.Position = UDim2.new(0.05, 0, 0, yOffset)
            dropdownFrame.BackgroundColor3 = Theme.Section
            Instance.new("UICorner", dropdownFrame).CornerRadius = UDim.new(0,6)

            local dropdownLabel = Instance.new("TextLabel", dropdownFrame)
            dropdownLabel.Size = UDim2.new(0.7, 0, 1, 0)
            dropdownLabel.Position = UDim2.new(0, 10, 0, 0)
            dropdownLabel.BackgroundTransparency = 1
            dropdownLabel.Text = text .. ": " .. (options[default] or "Select")
            dropdownLabel.TextColor3 = Theme.Text
            dropdownLabel.Font = Enum.Font.SourceSansBold
            dropdownLabel.TextSize = 14
            dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left

            local arrow = Instance.new("TextLabel", dropdownFrame)
            arrow.Size = UDim2.new(0, 20, 1, 0)
            arrow.Position = UDim2.new(1, -30, 0, 0)
            arrow.BackgroundTransparency = 1
            arrow.Text = "▼"
            arrow.TextColor3 = Theme.Text
            arrow.Font = Enum.Font.SourceSansBold
            arrow.TextSize = 14

            local dropdownBtn = Instance.new("TextButton", dropdownFrame)
            dropdownBtn.Size = UDim2.new(1, 0, 1, 0)
            dropdownBtn.BackgroundTransparency = 1
            dropdownBtn.Text = ""

            local optionsFrame = Instance.new("Frame", self.content)
            optionsFrame.Size = UDim2.new(0.9, 0, 0, 0)
            optionsFrame.Position = UDim2.new(0.05, 0, 0, yOffset + 41)
            optionsFrame.BackgroundColor3 = Theme.Section
            optionsFrame.Visible = false
            optionsFrame.ClipsDescendants = true
            optionsFrame.ZIndex = 2
            Instance.new("UICorner", optionsFrame).CornerRadius = UDim.new(0,6)

            local UIListLayout = Instance.new("UIListLayout", optionsFrame)
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

            local opened = false
            local selected = default

            local function updateOptions()
                for i, v in ipairs(optionsFrame:GetChildren()) do
                    if v:IsA("TextButton") then
                        v:Destroy()
                    end
                end

                for i, option in ipairs(options) do
                    local optionBtn = Instance.new("TextButton", optionsFrame)
                    optionBtn.Size = UDim2.new(1, 0, 0, 30)
                    optionBtn.BackgroundColor3 = i == selected and Theme.Element or Theme.Section
                    optionBtn.Text = option
                    optionBtn.TextColor3 = Theme.Text
                    optionBtn.Font = Enum.Font.SourceSans
                    optionBtn.TextSize = 14
                    optionBtn.LayoutOrder = i
                    optionBtn.ZIndex = 3
                    optionBtn.TextXAlignment = Enum.TextXAlignment.Center
                    Instance.new("UICorner", optionBtn).CornerRadius = UDim.new(0,4)
                    
                    optionBtn.MouseButton1Click:Connect(function()
                        selected = i
                        dropdownLabel.Text = text .. ": " .. option
                        optionsFrame.Visible = false
                        opened = false
                        arrow.Text = "▼"
                        if callback then callback(option, i) end
                    end)
                end
                
                optionsFrame.Size = UDim2.new(1, 0, 0, #options * 30)
            end

            updateOptions()

            dropdownBtn.MouseButton1Click:Connect(function()
                opened = not opened
                optionsFrame.Visible = opened
                arrow.Text = opened and "▲" or "▼"
            end)
            elementCount = elementCount + 1
            return {
                Frame = dropdownFrame,
                GetSelection = function() return selected, options[selected] end,
                SetSelection = function(index)
                    if index >= 1 and index <= #options then
                        selected = index
                        dropdownLabel.Text = text .. ": " .. options[index]
                        if callback then callback(options[index], index) end
                    end
                end
            }
        end,
        
        AddLabel = function(self, text)
            local yOffset = getYOffset()
            local label = Instance.new("TextLabel", self.content)
            label.Size = UDim2.new(0.9, 0, 0, 24)
            label.Position = UDim2.new(0.05, 0, 0, yOffset)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = Theme.Text
            label.Font = Enum.Font.SourceSans
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Center
            elementCount = elementCount + 1
            return label
        end
    }
    
    table.insert(self.Tabs, tabData)
    return tabData
end

-- Close / Minimize
CloseBtn.MouseButton1Click:Connect(function()
    Gui.Enabled = false
end)

local minimized = false
MinBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        for _, t in pairs(SyrexUI.Tabs) do
            t.content.Visible = false
        end
        MainFrame.Size = UDim2.new(0,260,0,34)
    else
        for _, t in pairs(SyrexUI.Tabs) do
            t.content.Visible = (t.button.BackgroundColor3 == Theme.Element)
        end
        MainFrame.Size = UDim2.new(0,520,0,340)
    end
end)

-- Keybind to toggle GUI - THIS NOW WORKS!
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Settings.CloseBind then
        Gui.Enabled = not Gui.Enabled
    end
end)

-- Make draggable
MakeDraggable(TopBar, MainFrame)
MakeDraggable(TabFrame, TabFrame)

-- Return the library for modular usage
return SyrexUI
