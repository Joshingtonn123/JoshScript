-- Syrex UI Library - Fixed Draggable & Old Title Bar

if game.CoreGui:FindFirstChild("SyrexUILib") then
    game.CoreGui.SyrexUILib:Destroy()
end

local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")

local Theme = {
    Background = Color3.fromRGB(9,9,13),
    Section = Color3.fromRGB(0,20,40),
    Element = Color3.fromRGB(61,133,224),
    Text = Color3.fromRGB(255,255,255),
}

local Settings = {
    CloseBind = Enum.KeyCode.RightControl,
}

-- UI Configuration
local UIConfig = {
    Title = "SyrexUI",
    Subtitle = "SyrexUI", 
    LoadingText = "SyrexUI",
}

-- ScreenGui
local Gui = Instance.new("ScreenGui")
Gui.Name = "SyrexUILib"
Gui.Parent = CoreGui
Gui.ResetOnSpawn = false

-- Loading Screen
local LoadingFrame = Instance.new("Frame")
LoadingFrame.Size = UDim2.new(0, 400, 0, 200)
LoadingFrame.Position = UDim2.new(0.5, -200, 0.5, -100)
LoadingFrame.BackgroundColor3 = Theme.Background
LoadingFrame.Parent = Gui
Instance.new("UICorner", LoadingFrame).CornerRadius = UDim.new(0,6)

local LoadingTitle = Instance.new("TextLabel", LoadingFrame)
LoadingTitle.Size = UDim2.new(1, -40, 0, 60)
LoadingTitle.Position = UDim2.new(0, 20, 0, 30)
LoadingTitle.BackgroundTransparency = 1
LoadingTitle.Text = UIConfig.Title
LoadingTitle.TextColor3 = Theme.Text
LoadingTitle.Font = Enum.Font.FredokaOne
LoadingTitle.TextSize = 28
LoadingTitle.TextXAlignment = Enum.TextXAlignment.Center

local LoadingSubtitle = Instance.new("TextLabel", LoadingFrame)
LoadingSubtitle.Size = UDim2.new(1, -40, 0, 40)
LoadingSubtitle.Position = UDim2.new(0, 20, 0, 90)
LoadingSubtitle.BackgroundTransparency = 1
LoadingSubtitle.Text = UIConfig.LoadingText
LoadingSubtitle.TextColor3 = Color3.fromRGB(200,200,200)
LoadingSubtitle.Font = Enum.Font.SourceSans
LoadingSubtitle.TextSize = 20
LoadingSubtitle.TextXAlignment = Enum.TextXAlignment.Center

local LoadingBar = Instance.new("Frame", LoadingFrame)
LoadingBar.Size = UDim2.new(0.8, 0, 0, 4)
LoadingBar.Position = UDim2.new(0.1, 0, 0, 140)
LoadingBar.BackgroundColor3 = Theme.Section
LoadingBar.BorderSizePixel = 0
Instance.new("UICorner", LoadingBar).CornerRadius = UDim.new(1,0)

local LoadingBarFill = Instance.new("Frame", LoadingBar)
LoadingBarFill.Size = UDim2.new(0, 0, 1, 0)
LoadingBarFill.BackgroundColor3 = Theme.Element
LoadingBarFill.BorderSizePixel = 0
Instance.new("UICorner", LoadingBarFill).CornerRadius = UDim.new(1,0)

-- Main GUI Frame (initially hidden)
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0,520,0,340)
MainFrame.Position = UDim2.new(0.5,-260,0.5,-170)
MainFrame.BackgroundColor3 = Theme.Background
MainFrame.Active = true
MainFrame.Parent = Gui
MainFrame.Visible = false
Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0,6)

-- Floating Tab Bar (initially hidden)
local TabFrame = Instance.new("Frame")
TabFrame.Size = UDim2.new(0,100,0,340)
TabFrame.Position = UDim2.new(0.5,-370,0.5,-170)
TabFrame.BackgroundColor3 = Theme.Background
TabFrame.Parent = Gui
TabFrame.Visible = false
Instance.new("UICorner", TabFrame).CornerRadius = UDim.new(0,6)

-- GUI Toggle Button (initially hidden)
local ToggleBtn = Instance.new("TextButton")
ToggleBtn.Size = UDim2.new(0, 80, 0, 40)
ToggleBtn.Position = UDim2.new(0, 10, 0.5, -20)
ToggleBtn.BackgroundColor3 = Theme.Element
ToggleBtn.Text = "Close"
ToggleBtn.TextColor3 = Theme.Text
ToggleBtn.Font = Enum.Font.SourceSansBold
ToggleBtn.TextSize = 16
ToggleBtn.Visible = false
ToggleBtn.Parent = CoreGui
ToggleBtn.ZIndex = 10
Instance.new("UICorner", ToggleBtn).CornerRadius = UDim.new(0,6)

-- OLD TITLE BAR (Simple version)
local TopBar = Instance.new("Frame", MainFrame)
TopBar.Size = UDim2.new(1,0,0,34)
TopBar.BackgroundTransparency = 1
TopBar.Active = true
TopBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
TopBar.BackgroundTransparency = 0.3  -- Semi-transparent red for debugging draggable area

local Title = Instance.new("TextLabel", TopBar)
Title.Size = UDim2.new(1,-80,1,0)
Title.Position = UDim2.new(0,12,0,0)
Title.BackgroundTransparency = 1
Title.Font = Enum.Font.FredokaOne
Title.Text = UIConfig.Title
Title.TextColor3 = Theme.Text
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Left

local CloseBtn = Instance.new("TextButton", TopBar)
CloseBtn.Size = UDim2.new(0,60,0,24)
CloseBtn.Position = UDim2.new(1,-70,0,5)
CloseBtn.BackgroundColor3 = Theme.Section
CloseBtn.Text = "Close"
CloseBtn.Font = Enum.Font.SourceSansBold
CloseBtn.TextColor3 = Theme.Text
CloseBtn.TextSize = 14
Instance.new("UICorner", CloseBtn).CornerRadius = UDim.new(0,6)

local MinBtn = Instance.new("TextButton", TopBar)
MinBtn.Size = UDim2.new(0,40,0,24)
MinBtn.Position = UDim2.new(1,-120,0,5)
MinBtn.BackgroundColor3 = Theme.Section
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.SourceSansBold
MinBtn.TextColor3 = Theme.Text
MinBtn.TextSize = 18
Instance.new("UICorner", MinBtn).CornerRadius = UDim.new(0,6)

-- Simple Library Table
local SyrexUI = {
    Tabs = {},
    UIConfig = UIConfig
}

-- PROPER DRAGGABLE FUNCTION
local function MakeDraggable(topbar, frame)
    local dragging = false
    local dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    connection:Disconnect()
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            update(input)
        end
    end)
end

-- Make toggle button draggable
local toggleDragging = false
local toggleDragStart, toggleStartPos

ToggleBtn.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        toggleDragging = true
        toggleDragStart = input.Position
        toggleStartPos = ToggleBtn.Position
        
        local connection
        connection = input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                toggleDragging = false
                connection:Disconnect()
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if toggleDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - toggleDragStart
        ToggleBtn.Position = UDim2.new(
            toggleStartPos.X.Scale, toggleStartPos.X.Offset + delta.X,
            toggleStartPos.Y.Scale, toggleStartPos.Y.Offset + delta.Y
        )
    end
end)

-- Loading function
local function showLoadingScreen()
    -- Animate loading bar
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(LoadingBarFill, tweenInfo, {Size = UDim2.new(1, 0, 1, 0)})
    tween:Play()
    
    wait(2.2)
    
    -- Fade out loading screen
    local fadeTween = TweenService:Create(LoadingFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1})
    fadeTween:Play()
    
    wait(0.5)
    LoadingFrame.Visible = false
    
    -- Show main UI
    MainFrame.Visible = true
    TabFrame.Visible = true
    ToggleBtn.Visible = true
    
    -- Apply draggable AFTER UI is visible
    MakeDraggable(TopBar, MainFrame)
    MakeDraggable(TabFrame, TabFrame)
end

-- CreateWindow
function SyrexUI:CreateWindow(title, subtitle, loadingText)
    if title then
        UIConfig.Title = title
        Title.Text = title
        LoadingTitle.Text = title
    end
    if subtitle then
        UIConfig.Subtitle = subtitle
    end
    if loadingText then
        UIConfig.LoadingText = loadingText
        LoadingSubtitle.Text = loadingText
    end
    
    -- Show loading screen first
    showLoadingScreen()
    
    -- Return window object
    local window = {}
    
    function window:CreateTab(tabName)
        return SyrexUI:CreateTab(tabName)
    end
    
    return window
end

-- CreateTab
function SyrexUI:CreateTab(name)
    local content = Instance.new("ScrollingFrame", MainFrame)
    content.Size = UDim2.new(1,-24,1,-56)  -- Adjusted for old title bar height
    content.Position = UDim2.new(0,12,0,44)
    content.BackgroundTransparency = 1
    content.Visible = false
    content.ScrollingEnabled = true
    content.ScrollBarThickness = 6
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.CanvasSize = UDim2.new(0,0,0,0)

    local btn = Instance.new("TextButton", TabFrame)
    btn.Size = UDim2.new(1,-10,0,40)
    btn.Position = UDim2.new(0,5,0,20+(#self.Tabs*50))
    btn.BackgroundColor3 = Theme.Section
    btn.Text = name
    btn.Font = Enum.Font.SourceSansBold
    btn.TextColor3 = Theme.Text
    btn.TextSize = 16
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)

    btn.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            t.content.Visible = false
            t.button.BackgroundColor3 = Theme.Section
        end
        content.Visible = true
        btn.BackgroundColor3 = Theme.Element
    end)

    if #self.Tabs==0 then
        content.Visible=true
        btn.BackgroundColor3 = Theme.Element
    end

    local elementCount = 0
    
    local function getYOffset()
        return elementCount * 42
    end

    local tab = {
        button = btn, 
        content = content,
        
        AddButton = function(self, text, callback)
            local yOffset = getYOffset()
            local btn = Instance.new("TextButton", content)
            btn.Size = UDim2.new(0.9,0,0,36)
            btn.Position = UDim2.new(0.05,0,0,yOffset)
            btn.BackgroundColor3 = Theme.Section
            btn.Font = Enum.Font.SourceSansBold
            btn.TextColor3 = Theme.Text
            btn.TextSize = 18
            btn.Text = text
            Instance.new("UICorner", btn).CornerRadius = UDim.new(0,6)
            btn.MouseButton1Click:Connect(callback)
            elementCount = elementCount + 1
            return btn
        end,
        
        AddToggle = function(self, text, default, callback)
            local yOffset = getYOffset()
            local toggle = Instance.new("TextButton", content)
            toggle.Size = UDim2.new(0.9,0,0,36)
            toggle.Position = UDim2.new(0.05,0,0,yOffset)
            toggle.BackgroundColor3 = Theme.Section
            toggle.Font = Enum.Font.SourceSansBold
            toggle.TextColor3 = Theme.Text
            toggle.TextSize = 18
            toggle.Text = text..": "..(default and "ON" or "OFF")
            Instance.new("UICorner", toggle).CornerRadius = UDim.new(0,6)

            local state = default
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = text..": "..(state and "ON" or "OFF")
                toggle.BackgroundColor3 = state and Theme.Element or Theme.Section
                if callback then callback(state) end
            end)
            elementCount = elementCount + 1
            return toggle
        end,
        
        AddLabel = function(self, text)
            local yOffset = getYOffset()
            local label = Instance.new("TextLabel", content)
            label.Size = UDim2.new(0.9, 0, 0, 24)
            label.Position = UDim2.new(0.05, 0, 0, yOffset)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = Theme.Text
            label.Font = Enum.Font.SourceSans
            label.TextSize = 14
            elementCount = elementCount + 1
            return label
        end
    }
    
    table.insert(self.Tabs, tab)
    return tab
end

-- Toggle Button functionality
ToggleBtn.MouseButton1Click:Connect(function()
    Gui.Enabled = not Gui.Enabled
    ToggleBtn.Text = Gui.Enabled and "Close" or "Open"
end)

-- Close / Minimize
local minimized = false
MinBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        for _, t in pairs(SyrexUI.Tabs) do
            t.content.Visible = false
        end
        MainFrame.Size = UDim2.new(0,520,0,34)  -- Old title bar height
    else
        for _, t in pairs(SyrexUI.Tabs) do
            t.content.Visible = (t.button.BackgroundColor3 == Theme.Element)
        end
        MainFrame.Size = UDim2.new(0,520,0,340)
    end
end)

CloseBtn.MouseButton1Click:Connect(function()
    Gui.Enabled = false
    ToggleBtn.Text = "Open"
end)

-- Keybind to toggle GUI
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Settings.CloseBind then
        Gui.Enabled = not Gui.Enabled
        ToggleBtn.Text = Gui.Enabled and "Close" or "Open"
    end
end)

-- Return the library
return SyrexUI
